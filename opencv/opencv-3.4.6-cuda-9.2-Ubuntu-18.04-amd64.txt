Bootstrap: docker
From: ubuntu:18.04

%help
     Use the --nv switch.
     With the --nv option the driver libs are located on the host system and then bind mounted into the container at runtime.

%setup
    mkdir ${SINGULARITY_ROOTFS}/download

%files
    /tmp/cuda-repo-ubuntu1710-9-2-local_9.2.148-1_amd64.deb          /download/cuda-repo-ubuntu1710-9-2-local_9.2.148-1_amd64.deb
    /tmp/cuda-repo-ubuntu1710_9.2.148-1_amd64.deb                    /download/cuda-repo-ubuntu1710_9.2.148-1_amd64.deb
    /tmp/libcudnn7_7.5.0.56-1+cuda9.2_amd64.deb                      /download/libcudnn7_7.5.0.56-1+cuda9.2_amd64.deb
    /tmp/libcudnn7-dev_7.5.0.56-1+cuda9.2_amd64.deb                  /download/libcudnn7-dev_7.5.0.56-1+cuda9.2_amd64.deb
    /tmp/libcudnn7-doc_7.5.0.56-1+cuda9.2_amd64.deb                  /download/libcudnn7-doc_7.5.0.56-1+cuda9.2_amd64.deb
    /tmp/nccl-repo-ubuntu1604-2.3.7-ga-cuda9.2_1-1_amd64.deb         /download/nccl-repo-ubuntu1604-2.3.7-ga-cuda9.2_1-1_amd64.deb
    /tmp/nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb   /download/nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb

%labels
    Maintainer "Patrice Dion" <patrice.dion@etsmtl.ca>
    Architecture x86_64
    Version v1.0.4

%post

    # set apt proxy
     echo 'Acquire::http::Proxy "http://proxy.logti.etsmtl.ca:3128";' >> /etc/apt/apt.conf
     echo "" >> /etc/apt/apt.conf

     export HTTP_PROXY="http://proxy.logti.etsmtl.ca:3128"

    # set noninteractive installation
    export DEBIAN_FRONTEND=noninteractive
    #install tzdata package
    apt-get update
    apt-get install -y tzdata
    # set your timezone
    ln -fs /usr/share/zoneinfo/America/Montreal /etc/localtime
    dpkg-reconfigure --frontend noninteractive tzdata

    apt-get update
    apt-get -y upgrade
    apt-get -y install software-properties-common build-essential cmake wget clang htop
    add-apt-repository universe

    # egl.h, eglext.h, gl31.h, libGLU.so, glu.h,-lglut
    apt-get -y install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev libglfw3-dev libgles2-mesa-dev

    # Pour Pycharm 2019.1, rendering jupyter
    apt-get -y install libxslt1.1
    apt-get -y install libcanberra-gtk-module libcanberra-gtk3-module

    # Install gcc-7
    # voir h ttps://stackoverflow.com/questions/6622454/cuda-incompatible-with-my-gcc-version/8969593
    apt-get -y install gcc-7 g++-7

    # Local installation
    # dpkg -i /download/cuda-repo-ubuntu1710-9-2-local_9.2.148-1_amd64.deb
    # apt-key add /var/cuda-repo-9-2-local/7fa2af80.pub
    # apt-get update
    # apt-get -y install cuda-toolkit-9-2 cuda-samples-9-2

    # Network installation
    dpkg -i /download/cuda-repo-ubuntu1710_9.2.148-1_amd64.deb
    apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
    apt-get update
    apt-get -y install cuda-toolkit-9-2 cuda-samples-9-2

    # install NVIDIA/CUDDN
    dpkg -i /download/libcudnn*_amd64.deb

    # Install nccl in local repo /var/nccl-repo-2.4.2-ga-cuda9.2
    dpkg -i /download/nccl*_amd64.deb
    apt-get update
    apt-get -y install libnccl2 libnccl-dev

    # set cuda default compiler gcc-7
    ln -s /usr/bin/gcc-7 /usr/local/cuda/bin/gcc
    ln -s /usr/bin/g++-7 /usr/local/cuda/bin/g++

    #
    ln -s /usr/local/cuda/lib64/libcudart.so /usr/lib/libcudart.so

    # compile sample with gcc-6
    cd /usr/local/cuda-9.2/samples
    export CUDA_HOME=/usr/local/cuda-9.2
    export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH

    export PATH=${CUDA_HOME}/bin:${PATH}
    export PATH=${CUDA_HOME}/samples/bin/x86_64/linux/release:${PATH}

    make --ignore-errors -j4

   #
   # opencv 3.4.6
   # voir : https://gist.github.com/raulqf/a3caa97db3f8760af33266a1475d0e5e

   apt-get -y install git wget curl
   apt-get -y install build-essential cmake pkg-config unzip yasm git gfortran
   apt-get -y install libjpeg8-dev libtiff5-dev libpng-dev
   apt-get -y install libavcodec-dev libavformat-dev libswscale-dev
   apt-get -y install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
   apt-get -y install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev libvorbis-dev
   apt-get -y install libgtk-3-dev

   apt-get -y install python3-dev python3-pip
   pip3 install pip numpy
   apt-get -y install libtbb-dev
   apt-get -y install libatlas-base-dev gfortran

   apt-get -y install libprotobuf-dev protobuf-compiler
   apt-get -y install libgoogle-glog-dev libgflags-dev
   apt-get -y install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen

   apt-get -y install flake8 python3-flake8 pylint3

   # Can't install libjasper-dev libjasper1, o not exist in 18.04

   export DPKG_DEPEND="ca-certificates \
	            build-essential \
	            apt-utils \
 	            cmake \
	            git \
	            libgtk2.0-dev \
	            pkg-config \
	            libavcodec-dev \
	            libavformat-dev \
	            libswscale-dev \
	            wget \
	            libhdf5-dev \
	            g++ \
	            graphviz \
	            libtbb2 \
	            libtbb-dev \
	            libjpeg-dev \
	            libpng-dev \
	            libtiff-dev \
	            libgtk-3-dev \
	            libatlas-base-dev \
	            gfortran \
	            openblas-* \
	            libopenblas-dev \
	            libeigen3-dev \
	            ocl-icd-opencl-dev \
	            python3-dev \
	            python3-tk \
	            python3-numpy \
	            python3-scipy \
	            python3-h5py \
	            python3-sympy \
	            libcupti-dev \
	            libgtkglext1-dev \
	            libgtkglext1 \
	            freeglut3-dev \
	            libgl1-mesa-dev \
	            mesa-common-dev \
	            libprotobuf-dev \
	            protobuf-compiler \
	            libleveldb-dev \
	            libhdf5-serial-dev \
	            libboost-dev \
	            libboost-all-dev \
	            libatlas-base-dev \
	            libopencore-amrnb-dev \
	            libopencore-amrwb-dev \
	            libtheora-dev \
	            libvorbis-dev \
	            libxvidcore-dev \
	            liblapacke-dev \
	            libopenni2-dev \
	            libgflags-dev \
	            libgoogle-glog-dev \
	            liblmdb-dev"


for i in ${DPKG_DEPEND}; do apt-get --assume-yes install  $i; done



   cd /download
   git clone https://github.com/opencv/opencv.git
   cd opencv
   git checkout 3.4.6
   cd ..

   git clone https://github.com/opencv/opencv_contrib.git
   cd opencv_contrib
   git checkout 3.4.6
   cd ..

   git clone https://github.com/opencv/opencv_extra.git
   cd opencv_extra
   git checkout 3.4.6
   cd ..

   cd opencv
   mkdir build
   cd build

   export OPENCV_DIR="/usr/local/opencv/3.4.6"

   cmake \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D BUILD_PYTHON_SUPPORT=ON \
    -D CMAKE_INSTALL_PREFIX=/usr/local/opencv/3.4.6 \
    -D CUDA_CUDA_LIBRARY=/usr/local/cuda-9.2/lib64/stubs/libcuda.so \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D BUILD_PYTHON_SUPPORT=ON \
    -D BUILD_NEW_PYTHON_SUPPORT=ON \
    -D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \
    -D PYTHON_INCLUDE_DIR=/usr/include/python3.6 \
    -D PYTHON_INCLUDE_DIR2=/usr/include/x86_64-linux-gnu/python3.6m \
    -D PYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so \
    -D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/lib/python3/dist-packages/numpy/core/include/ \
    -D OPENCV_TEST_DATA_PATH=/download/opencv_extra/testdata\
    -D WITH_TBB=OFF \
    -D WITH_PTHREADS_PF=ON \
    -D WITH_OPENNI=OFF \
    -D WITH_OPENNI2=ON \
    -D WITH_EIGEN=ON \
    -D BUILD_DOCS=ON \
    -D BUILD_TESTS=ON \
    -D BUILD_PERF_TESTS=ON \
    -D BUILD_EXAMPLES=ON \
    -D WITH_OPENCL=ON \
    -D WITH_CUDA=ON \
    -D WITH_CUBLAS=ON \
    -D USE_GStreamer=ON \
    -D WITH_GDAL=ON \
    -D WITH_CSTRIPES=ON \
    -D WITH_NVCUVID=ON \
    -D ENABLE_FAST_MATH=1 \
    -D CUDA_FAST_MATH=1 \
    -D BUILD_opencv_gpu=ON \
    -D BUILD_opencv_gpuarithm=ON \
    -D BUILD_opencv_gpubgsegm=ON \
    -D BUILD_opencv_gpucodec=ON \
    -D BUILD_opencv_gpufeatures2d=ON \
    -D BUILD_opencv_gpufilters=ON \
    -D BUILD_opencv_gpuimgproc=ON \
    -D BUILD_opencv_gpulegacy=ON \
    -D BUILD_opencv_gpuoptflow=ON \
    -D BUILD_opencv_gpustereo=ON \
    -D BUILD_opencv_gpuwarping=ON \
    -D WITH_OPENGL=ON \
    -D WITH_QT=OFF \
    -D WITH_IPP=ON \
    -D WITH_V4L=OFF \
    -D WITH_LIBV4L=ON \
    -D WITH_FFMPEG=0 \
    -D WITH_GSTREAMER=OFF \
    -D CUDA_GENERATION="Maxwell" -D CUDA_GENERATION="Pascal" ..


   make

   make install


   # libraries pour le lab
   pip3 --no-cache-dir install virtualenv
   pip3 --no-cache-dir install pytest

   pip3 --no-cache-dir install matplotlib     # visualisation
   pip3 --no-cache-dir install seaborn        # visualisation
   pip3 --no-cache-dir install pandas
   pip3 --no-cache-dir install jupyter

   # installation de qt4 pour jupiter (dependance)
   apt-get install --assume-yes python3-pyqt4

   pip3 --no-cache-dir install bokeh          # visualisation

   # voir http://docs.dask.org/en/latest/install.html
   pip3 --no-cache-dir install "dask[complete]"     # parallel

   pip3 --no-cache-dir install ipython
   pip3 --no-cache-dir install scikit-image
   pip3 --no-cache-dir install scikit-learn>=0.20.3
   pip3 --no-cache-dir install numPy
   pip3 --no-cache-dir install joblib
   pip3 --no-cache-dir install graphviz

   # ImportError: cannot import name create_prmpt_application ipython>6 for prompttoolkit>2
   pip3 install ipython==7.5

%test
      # /usr/bin/nvidia-smi
      # /usr/local/cuda-9.2/samples/bin/x86_64/linux/release/deviceQuery

      # is the package installed
      #  pkg-config opencv --cflags
      #  pkg-config opencv --libs

      # export LD_LIBRARY_PATH=/usr/local/opencv/3.4.6/lib:$LD_LIBRARY_PATH
      # python3 -c 'import cv2 as cv ; print(cv.__version__)'

      # test the installation
      # export OPENCV_TEST_DATA_PATH=/download/opencv_extra/testdata
      # cd /download/opencv/build/bin
      # ./opencv_test-core
      # ls -al *test*

%runscript
      # https://singularity.lbl.gov/docs-run
      # exec "$@"
      exec /usr/bin/python3 "$@"


%environment
   export LC_ALL=C

   export CUDA_HOME=/usr/local/cuda-9.2

   export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:$LD_LIBRARY_PATH
   export LD_LIBRARY_PATH=${CUDA_HOME}/extras/CUPTI/lib64:$LD_LIBRARY_PATH
   export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
   export LD_LIBRARY_PATH=/usr/local/opencv/3.4.6/lib:$LD_LIBRARY_PATH

   export PATH=${CUDA_HOME}/bin:${PATH}
   export PATH=${CUDA_HOME}/samples/bin/x86_64/linux/release:${PATH}

   export PYTHONPATH=/usr/local/opencv/3.4.6/lib/python3.6/dist-packages/:${PYTHONPATH}
   export PYTHONPATH=/usr/local/lib/python3.6/dist-packages/:${PYTHONPATH}

   export HTTP_PROXY="http://proxy.logti.etsmtl.ca:3128"

   # jupyter notebook /run/user/1000/
   # Permission issue for /run/user/0/jupyter when I execute jupyter notebook
   # voir https://groups.google.com/forum/#!topic/jupyter/uQ8Jqz4rnu0
   unset XDG_RUNTIME_DIR

EOF


# Building the container

singularity build --notest opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64-with-source.simg  opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64-with-source.def
singularity shell --nv opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64-with-source.simg

#
# build and test de container
#
singularity build --sandbox opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64-with-source/  opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64-with-source.def
singularity shell --nv --writable-tmpfs opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64-with-source/
singularity build opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64-with-source.simg  opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64-with-source/

#
# Installation de package python
#
virtualenv --system-site-packages -p python3 gti770-test
source gti770-test/bin/activate
python3 -c 'import cv2 as cv ; print(cv.__version__)'
pip3 install camelcase


#
# execute as an interpretor
#

singularity exec --nv /singularity/opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64.simg /bin/bash
singularity exec --nv /singularity/opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64.simg /home/ladmin/venv.sh && python3 --version
singularity exec --nv /singularity/opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64.simg "/home/ladmin/venv.sh ; python3 -c 'import cv2 as cv ; print(cv.__version__)'"


cat python3-singularity.sh
  #!/bin/bash

  #echo $@
  #singularity exec --nv /singularity/opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64.simg /home/ladmin/venv.sh && python3 $@

  singularity exec --nv /singularity/opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64.simg "/home/ladmin/venv.sh"



singularity run --nv /singularity/opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64.simg /bin/bash -c "source gti770-test/bin/activate"; python3 --version

# Run pycharm in the container
# -H change $HOME to /home/ladmin : default = /usr/local/singularity/3.1.0
singularity shell -B /opt/PyCharm:/opt/PyCharm -B /etc/profile.d/jetbrains-pycharm.sh -H /home/ladmin --nv --writable-tmpfs /singularity/opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64.simg


# enable %runscript
singularity run --nv /singularity/opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64.simg  python3 -c 'import cv2 as cv ; print(cv.__version__)'
singularity run --nv /singularity/opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64.simg  python3 --version

# run python without source activate
venv.sh
    #!/home/ladmin/gti770-test/bin/python3

    import cv2 as cv
    print(cv.__version__)


# voir https://stackoverflow.com/questions/4303128/how-to-use-multiple-arguments-for-awk-with-a-shebang-i-e
#!/usr/bin/env -S command arg1 arg2


# Remove /download directory
#

singularity build --sandbox opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64/ opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64-with-source.simg
rm -Rf  opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64/download
singularity build  opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64.simg opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64/
rm -Rf opencv-3.4.6-cuda-9.2-Ubuntu-18.04-amd64
