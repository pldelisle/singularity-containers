Bootstrap: docker
From: nvidia/cuda:9.2-cudnn7-devel-ubuntu18.04

%help
  Use the --nv switch.
  With the --nv option the driver libs are located on the host system and then bind mounted into the container at runtime.

%environment
  export LC_ALL=C

  export CUDA_HOME=/usr/local/cuda

  export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=${CUDA_HOME}/extras/CUPTI/lib64:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=/usr/local/opencv/$OPENCV_VERSION/lib:$LD_LIBRARY_PATH

  export PATH=${CUDA_HOME}/bin:${PATH}
  export PATH=${CUDA_HOME}/samples/bin/x86_64/linux/release:${PATH}

  export PYTHONPATH=/usr/local/opencv/$OPENCV_VERSION/lib/python3.6/dist-packages/:${PYTHONPATH}
  export PYTHONPATH=/usr/local/lib/python3.6/dist-packages/:${PYTHONPATH}

  # Jupyter Notebook /run/user/1000/
  # Permission issue for /run/user/0/jupyter when I execute Jupyter Notebook
  # See https://groups.google.com/forum/#!topic/jupyter/uQ8Jqz4rnu0
  unset XDG_RUNTIME_DIR

%labels
  Maintainer "Patrice Dion"
  Maintainer "Pierre-Luc Delisle" <github@pierre-luc-delisle.com>
  Architecture x86_64
  Version v1.0.4

%post
  # Set noninteractive installation
  export DEBIAN_FRONTEND=noninteractive

  # Export versions
  export OPENCV_VERSION=3.4.6
  export NCCL_VERSION=2.4.7-1+cuda9.2

  # Install tzdata package
  apt-get update > /dev/null 2>&1
  apt-get -y upgrade > /dev/null 2>&1
  apt-get install -y tzdata > /dev/null 2>&1
  # Set timezone
  ln -fs /usr/share/zoneinfo/America/Montreal /etc/localtime
  dpkg-reconfigure --frontend noninteractive tzdata

  apt-get install -y software-properties-common > /dev/null 2>&1
  add-apt-repository universe

  ln -s /usr/local/cuda/lib64/libcudart.so /usr/lib/libcudart.so

  export CUDA_HOME=/usr/local/cuda
  export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH

  export PATH=${CUDA_HOME}/bin:${PATH}

  # OpenCV 3.4.x
  # See : https://gist.github.com/raulqf/a3caa97db3f8760af33266a1475d0e5e

  export DPKG_DEPEND="ca-certificates \
    wget \
    curl \
    build-essential \
    apt-utils \
    cmake \
    git \
    unzip \
    yasm \
    gfortran \
    python3-dev \
    python3-pip \
    python3-tk \
    pkg-config \
    freeglut3-dev \
    clang \
    htop \
    flake8 \
    python3-flake8 \
    pylint3 \
    libnccl2=${NCCL_VERSION} \
    libnccl-dev=${NCCL_VERSION} \
    libx11-dev \
    libxmu-dev \
    libxi-dev \
    libgl1-mesa-glx \
    libglu1-mesa \
    libglu1-mesa-dev \
    libglfw3-dev \
    libgles2-mesa-dev \
    libgtk-3-dev \
    libjpeg8-dev \
    libtiff5-dev \
    libpng-dev \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libxvidcore-dev \
    x264 \
    libx264-dev \
    libfaac-dev \
    libmp3lame-dev \
    libtheora-dev \
    libvorbis-dev \
    libgtk2.0-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    g++ \
    graphviz \
    libtbb2 \
    libtbb-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    openblas-* \
    libopenblas-dev \
    ocl-icd-opencl-dev \
    libcupti-dev \
    libgtkglext1-dev \
    libgtkglext1 \
    freeglut3-dev \
    libgl1-mesa-dev \
    mesa-common-dev \
    libprotobuf-dev \
    protobuf-compiler \
    libleveldb-dev \
    libhdf5-serial-dev \
    libboost-dev \
    libboost-all-dev \
    libopencore-amrnb-dev \
    libopencore-amrwb-dev \
    libxvidcore-dev \
    liblapacke-dev \
    libopenni2-dev \
    libgflags-dev \
    libgoogle-glog-dev \
    liblmdb-dev \
    libgphoto2-dev \
    libeigen3-dev \
    libhdf5-dev \
    doxygen"


  for i in ${DPKG_DEPEND}; do apt-get --assume-yes --allow-change-held-packages --no-install-recommends install $i  > /dev/null 2>&1; done

  # For Pycharm 2019.1.1, add missing libs for Jupyter Notebook rendering through container.
  apt-get -y install libxslt1.1
  apt-get -y install libcanberra-gtk-module libcanberra-gtk3-module

  # Install gcc-7
  # See https://stackoverflow.com/questions/6622454/cuda-incompatible-with-my-gcc-version/8969593
  apt-get -y install gcc-7 g++-7
  # Set cuda default compiler gcc-7
  ln -s /usr/bin/gcc-7 /usr/local/cuda/bin/gcc
  ln -s /usr/bin/g++-7 /usr/local/cuda/bin/g++

  mkdir ~/Downloads && cd "$_" 
  cd ~/Downloads
  git clone https://github.com/opencv/opencv.git
  cd opencv
  git checkout ${OPENCV_VERSION}
  cd ..

  git clone https://github.com/opencv/opencv_contrib.git
  cd opencv_contrib
  git checkout ${OPENCV_VERSION}
  cd ..

  git clone https://github.com/opencv/opencv_extra.git
  cd opencv_extra
  git checkout ${OPENCV_VERSION}
  cd ..

  cd opencv
  mkdir build
  cd build

  export OPENCV_DIR="/usr/local/opencv/${OPENCV_VERSION}"

  cmake \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D BUILD_PYTHON_SUPPORT=ON \
    -D CMAKE_INSTALL_PREFIX=/usr/local/opencv/OPENCV_VERSION \
    -D CUDA_CUDA_LIBRARY=/usr/local/cuda-9.2/lib64/stubs/libcuda.so \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D BUILD_PYTHON_SUPPORT=ON \
    -D BUILD_NEW_PYTHON_SUPPORT=ON \
    -D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \
    -D PYTHON_INCLUDE_DIR=/usr/include/python3.6 \
    -D PYTHON_INCLUDE_DIR2=/usr/include/x86_64-linux-gnu/python3.6m \
    -D PYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so \
    -D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/lib/python3/dist-packages/numpy/core/include/ \
    -D OPENCV_TEST_DATA_PATH=~/Downloads/opencv_extra/testdata\
    -D WITH_TBB=ON \
    -D WITH_PTHREADS_PF=ON \
    -D WITH_OPENNI=OFF \
    -D WITH_OPENNI2=ON \
    -D WITH_EIGEN=ON \
    -D BUILD_DOCS=ON \
    -D BUILD_TESTS=ON \
    -D BUILD_PERF_TESTS=ON \
    -D BUILD_EXAMPLES=ON \
    -D WITH_OPENCL=ON \
    -D WITH_CUDA=ON \
    -D WITH_CUBLAS=ON \
    -D USE_GStreamer=ON \
    -D WITH_GDAL=ON \
    -D WITH_CSTRIPES=ON \
    -D WITH_NVCUVID=ON \
    -D ENABLE_FAST_MATH=1 \
    -D CUDA_FAST_MATH=1 \
    -D BUILD_opencv_gpu=ON \
    -D BUILD_opencv_gpuarithm=ON \
    -D BUILD_opencv_gpubgsegm=ON \
    -D BUILD_opencv_gpucodec=ON \
    -D BUILD_opencv_gpufeatures2d=ON \
    -D BUILD_opencv_gpufilters=ON \
    -D BUILD_opencv_gpuimgproc=ON \
    -D BUILD_opencv_gpulegacy=ON \
    -D BUILD_opencv_gpuoptflow=ON \
    -D BUILD_opencv_gpustereo=ON \
    -D BUILD_opencv_gpuwarping=ON \
    -D WITH_OPENGL=ON \
    -D WITH_QT=OFF \
    -D WITH_IPP=ON \
    -D WITH_V4L=OFF \
    -D WITH_LIBV4L=ON \
    -D WITH_FFMPEG=0 \
    -D WITH_GSTREAMER=OFF \
    -D CPU_DISPATCH=SSE4_2,AVX \
    -D CPU_DISPATCH=AVX \
    -D CPU_DISPATCH=AVX,AVX2 \
    -D CUDA_GENERATION="Maxwell" -D CUDA_GENERATION="Pascal" -D CUDA_GENERATION"Turing" -D CUDA_GENERATION"Volta" ..

  make -j

  make install

  # Install libraries
  pip3 --no-cache-dir install virtualenv
  pip3 --no-cache-dir install numpy>=1.16.2
  pip3 --no-cache-dir install joblib>=0.13.2
  pip3 --no-cache-dir install pytest>=4.5.0
  pip3 --no-cache-dir install graphviz>=0.10.1      # Visualisation
  pip3 --no-cache-dir install matplotlib>=3.1.0     # Visualisation
  pip3 --no-cache-dir install seaborn>=0.9.0        # Visualisation
  pip3 --no-cache-dir install bokeh>=1.1.0          # Visualisation
  pip3 --no-cache-dir install pandas>=0.24.2        # Data analysis
  pip3 --no-cache-dir install jupyter

  # Installation of QT4 for Jupyter (dependency)
  apt-get install -y python3-pyqt4

  # See http://docs.dask.org/en/latest/install.html
  pip3 --no-cache-dir install "dask[complete]"     # Parallel

  pip3 --no-cache-dir install ipython=>7.5
  pip3 --no-cache-dir install scikit-image>=0.15.0
  pip3 --no-cache-dir install scikit-learn>=0.21.1

  %test
  # /usr/bin/nvidia-smi
  # /usr/local/cuda-9.2/samples/bin/x86_64/linux/release/deviceQuery

  # is the package installed
  #  pkg-config opencv --cflags
  #  pkg-config opencv --libs

  # export LD_LIBRARY_PATH=/usr/local/opencv/3.4.6/lib:$LD_LIBRARY_PATH
  # python3 -c 'import cv2 as cv ; print(cv.__version__)'

  # Test the installation
  # export OPENCV_TEST_DATA_PATH=~/Downloads/opencv_extra/testdata
  # cd ~/Downloads/opencv/build/bin
  # ./opencv_test-core
  # ls -al *test*

  %runscript
  # https://singularity.lbl.gov/docs-run
  # exec "$@"
  exec /usr/bin/python3 "$@"

EOF
